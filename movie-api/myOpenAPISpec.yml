openapi: 3.0.0
info:
  title: movie-api
  version: 1.0.0
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    noauthAuth:
      type: http
      scheme: noauth
tags:
  - name: movie-authentication-routes
    description: Authentication and autherization process will be handled in this folder
  - name: movie-routes
    description: Movie routes will be handled here
paths:
  /auth/signup:
    post:
      tags:
        - movie-authentication-routes
      summary: post-auth-signup
      description: Initial signup can be done using this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: vimal@gmail.com
                password: password123
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/signin:
    post:
      tags:
        - movie-authentication-routes
      summary: post-auth-signin
      description: After signingup signing in can be done in this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: vimal@gmail.com
                password: password123
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/refresh_token:
    post:
      tags:
        - movie-authentication-routes
      summary: post-auth-accessToken using RefreshToken
      description: >-
        After 1 hour access token get expired so use this endpoint but giving
        the refresh token generated to get the new access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NjhlNWI1Y2E5YjIyYmU4ODg3NDg0OGUiLCJpYXQiOjE3MjA3MTA1ODgsImV4cCI6MTc1MjI0NjU4OH0.zFabDntaQmOp_qNwstzIe1xUiZV8CGXLpG_bT24yhNg
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /movie/{movieId}:
    get:
      tags:
        - movie-routes
      summary: get-movies-by id
      description: Use this endpoint to request movies by either id or mongoId
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - movie-routes
      summary: delete-movies-deleting movies by id
      description: Use this endpoint to patch movies by either id or mongoId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 2
                movieName: TItanic-tamil
                director: James-tamil
                rating: '10'
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /movie/:
    get:
      tags:
        - movie-routes
      summary: get-movieRoutes-get all movies
      description: Use this endpoint to request all movies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - movie-routes
      summary: patch-movies-patching movies
      description: Use this endpoint to post movies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 2
                movieName: TItanic
                director: James
                rating: '10'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /movie/{movieId}/:
    delete:
      tags:
        - movie-routes
      summary: delete-movies-deleting movies by id
      description: Use this endpoint to delete movies by either id or mongoId
      security:
        - bearerAuth: []
      parameters:
        - name: movieId
          in: path
          schema:
            type: string
          required: true
          example: 66900495a085e87c822aa2b8
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
